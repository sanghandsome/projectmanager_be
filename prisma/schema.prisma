generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String        @id @default(dbgenerated("gen_random_uuid()"))
  created_at      DateTime?     @default(now())
  updated_at      DateTime?     @updatedAt
  deleted_at      DateTime?
  refresh_token   String?
  we_id           String        @db.VarChar(5)
  full_name       String
  sex             Sex
  email           String        @unique
  phone           String?       @db.VarChar(10)
  discord_id      String?
  password        String
  date_of_birth   DateTime?
  otp             String?
  otp_expires_at  DateTime?
  otp_attempts    Int           @default(0)

  notifications   Notification[]
  teams           Team[]
  tasks          Task[]
  role_id         Int           @default(1)
  role            Role          @relation(fields: [role_id], references: [id])
  permissions     Permission[]

  assignedTasks Task[] @relation("AssignedTasks")
  reportedTasks Task[] @relation("ReportedTasks")

  @@index([email])
}

model Role {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  users        User[]     // Một role có thể có nhiều user
  permissions  Permission[]
}

model Permission {
  id             Int      @id @default(autoincrement())
  name           String
  users          User[]   // Mối quan hệ nhiều-nhiều với User
  roles          Role[]   // Mối quan hệ nhiều-nhiều với Role

  @@unique([name]) // Đảm bảo tên quyền duy nhất
}

model Team {
  id                String         @id @default(dbgenerated("gen_random_uuid()"))
  created_at        DateTime?      @default(now())
  updated_at        DateTime?      @updatedAt 
  deleted_at        DateTime?     
  team_name         String         @unique
  discord_channel_id String?
  notifications     Notification[]
  tasks             Task[]         // Mối quan hệ nhiều-nhiều với Task
  users             User[]         // Mối quan hệ nhiều-nhiều với User
}

model Notification {
  id               String    @id @default(dbgenerated("gen_random_uuid()"))
  created_at       DateTime? @default(now())
  updated_at       DateTime? @updatedAt 
  deleted_at       DateTime?      
  user_id          String?
  message          String?
  team_id          String?
  unread           Boolean   @default(true)
  user             User?     @relation(fields: [user_id], references: [id])
  team             Team?     @relation(fields: [team_id], references: [id])
}

model Task {
  id             String        @id @default(dbgenerated("gen_random_uuid()"))
  created_at     DateTime      @default(now())
  updated_at     DateTime?     @updatedAt 
  delete_at      DateTime?
  assignee_id    String?
  reporter_id    String
  date_start     DateTime      @db.Timestamptz
  date_end       DateTime      @db.Timestamptz
  task_name      String
  description    String?
  statement      String?
  users          User[]        // Nhiều người dùng liên quan đến Task (nhiều-nhiều)
  teams          Team[]        // Nhiều team liên quan đến Task (nhiều-nhiều)
  cfg_statement  CfgStatement? @relation(fields: [statement], references: [id])
  
  assignee       User?         @relation("AssignedTasks", fields: [assignee_id], references: [id])
  reporter       User?         @relation("ReportedTasks", fields: [reporter_id], references: [id])
}

model CfgStatement {
  id          String  @id @default(dbgenerated("gen_random_uuid()"))
  status      String
  description String?
  tasks       Task[]  // Mối quan hệ một-nhiều với Task
}

enum Sex {
  Male
  Female
  Other
}

enum RoleInTask {
  ASSIGNEE
  REPORTER
}